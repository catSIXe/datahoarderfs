// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace monolith {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class NodeRegistry
  {
    static readonly string __ServiceName = "greet.NodeRegistry";

    static readonly grpc::Marshaller<global::monolith.NodeAuthenticationRequest> __Marshaller_greet_NodeAuthenticationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::monolith.NodeAuthenticationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::monolith.NodeAuthenticationReply> __Marshaller_greet_NodeAuthenticationReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::monolith.NodeAuthenticationReply.Parser.ParseFrom);

    static readonly grpc::Method<global::monolith.NodeAuthenticationRequest, global::monolith.NodeAuthenticationReply> __Method_Authenticate = new grpc::Method<global::monolith.NodeAuthenticationRequest, global::monolith.NodeAuthenticationReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Authenticate",
        __Marshaller_greet_NodeAuthenticationRequest,
        __Marshaller_greet_NodeAuthenticationReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::monolith.GreetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for NodeRegistry</summary>
    public partial class NodeRegistryClient : grpc::ClientBase<NodeRegistryClient>
    {
      /// <summary>Creates a new client for NodeRegistry</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NodeRegistryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NodeRegistry that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NodeRegistryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NodeRegistryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NodeRegistryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::monolith.NodeAuthenticationReply Authenticate(global::monolith.NodeAuthenticationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Authenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::monolith.NodeAuthenticationReply Authenticate(global::monolith.NodeAuthenticationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Authenticate, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::monolith.NodeAuthenticationReply> AuthenticateAsync(global::monolith.NodeAuthenticationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::monolith.NodeAuthenticationReply> AuthenticateAsync(global::monolith.NodeAuthenticationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Authenticate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NodeRegistryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NodeRegistryClient(configuration);
      }
    }

  }
}
#endregion
