// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/fileRegistry.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace monolith {
  public static partial class FileRegistry
  {
    static readonly string __ServiceName = "datahoarderfs.FileRegistry";

    static readonly grpc::Marshaller<global::monolith.FileRegisterRequest> __Marshaller_datahoarderfs_FileRegisterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::monolith.FileRegisterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::monolith.FileRegisterReply> __Marshaller_datahoarderfs_FileRegisterReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::monolith.FileRegisterReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::monolith.FileBrowseRequest> __Marshaller_datahoarderfs_FileBrowseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::monolith.FileBrowseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::monolith.FileBrowseReply> __Marshaller_datahoarderfs_FileBrowseReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::monolith.FileBrowseReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::monolith.FileGetRequest> __Marshaller_datahoarderfs_FileGetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::monolith.FileGetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::monolith.FileGetReply> __Marshaller_datahoarderfs_FileGetReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::monolith.FileGetReply.Parser.ParseFrom);

    static readonly grpc::Method<global::monolith.FileRegisterRequest, global::monolith.FileRegisterReply> __Method_Register = new grpc::Method<global::monolith.FileRegisterRequest, global::monolith.FileRegisterReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_datahoarderfs_FileRegisterRequest,
        __Marshaller_datahoarderfs_FileRegisterReply);

    static readonly grpc::Method<global::monolith.FileBrowseRequest, global::monolith.FileBrowseReply> __Method_Browse = new grpc::Method<global::monolith.FileBrowseRequest, global::monolith.FileBrowseReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Browse",
        __Marshaller_datahoarderfs_FileBrowseRequest,
        __Marshaller_datahoarderfs_FileBrowseReply);

    static readonly grpc::Method<global::monolith.FileGetRequest, global::monolith.FileGetReply> __Method_Get = new grpc::Method<global::monolith.FileGetRequest, global::monolith.FileGetReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_datahoarderfs_FileGetRequest,
        __Marshaller_datahoarderfs_FileGetReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::monolith.FileRegistryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FileRegistry</summary>
    [grpc::BindServiceMethod(typeof(FileRegistry), "BindService")]
    public abstract partial class FileRegistryBase
    {
      public virtual global::System.Threading.Tasks.Task<global::monolith.FileRegisterReply> Register(global::monolith.FileRegisterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::monolith.FileBrowseReply> Browse(global::monolith.FileBrowseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::monolith.FileGetReply> Get(global::monolith.FileGetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FileRegistry</summary>
    public partial class FileRegistryClient : grpc::ClientBase<FileRegistryClient>
    {
      /// <summary>Creates a new client for FileRegistry</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FileRegistryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FileRegistry that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FileRegistryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FileRegistryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FileRegistryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::monolith.FileRegisterReply Register(global::monolith.FileRegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::monolith.FileRegisterReply Register(global::monolith.FileRegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::monolith.FileRegisterReply> RegisterAsync(global::monolith.FileRegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::monolith.FileRegisterReply> RegisterAsync(global::monolith.FileRegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      public virtual global::monolith.FileBrowseReply Browse(global::monolith.FileBrowseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Browse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::monolith.FileBrowseReply Browse(global::monolith.FileBrowseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Browse, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::monolith.FileBrowseReply> BrowseAsync(global::monolith.FileBrowseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BrowseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::monolith.FileBrowseReply> BrowseAsync(global::monolith.FileBrowseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Browse, null, options, request);
      }
      public virtual global::monolith.FileGetReply Get(global::monolith.FileGetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::monolith.FileGetReply Get(global::monolith.FileGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::monolith.FileGetReply> GetAsync(global::monolith.FileGetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::monolith.FileGetReply> GetAsync(global::monolith.FileGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FileRegistryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FileRegistryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FileRegistryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Register, serviceImpl.Register)
          .AddMethod(__Method_Browse, serviceImpl.Browse)
          .AddMethod(__Method_Get, serviceImpl.Get).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FileRegistryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::monolith.FileRegisterRequest, global::monolith.FileRegisterReply>(serviceImpl.Register));
      serviceBinder.AddMethod(__Method_Browse, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::monolith.FileBrowseRequest, global::monolith.FileBrowseReply>(serviceImpl.Browse));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::monolith.FileGetRequest, global::monolith.FileGetReply>(serviceImpl.Get));
    }

  }
}
#endregion
